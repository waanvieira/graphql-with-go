package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/waanvieira/graphqlgen/graph/model"
)

// Courses is the resolver for the courses field.
func (r *categoryResolver) Courses(ctx context.Context, obj *model.Category) ([]*model.Course, error) {
	courses, err := r.CourseDB.GetAllByCategoryId(obj.ID)
	if err != nil {
		return nil, err
	}

	var coursesModel []*model.Course
	// Aqui fazemos um loop, percorremos o array e para cada curso eu adiciono no array coursemodel com append no formato de model.course
	for _, course := range courses {
		coursesModel = append(coursesModel, &model.Course{
			ID:          course.ID,
			Name:        course.Name,
			Description: &course.Description,
			// Modo para retornar apenas o ID da categoria no antigo relacionamento
			// Categories:  &model.Category{ID: course.CategoryID},
		})
	}
	return coursesModel, nil

}

// Categories is the resolver for the categories field.
func (r *courseResolver) Categories(ctx context.Context, obj *model.Course) (*model.Category, error) {
	course, err := r.CategoryDB.GetCategoryByCourseID(obj.ID)
	if err != nil {
		return nil, err
	}
	return &model.Category{
		ID:          course.ID,
		Name:        course.Name,
		Description: &course.Description,
	}, nil
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input *model.NewCategory) (*model.Category, error) {
	// Resolver seria o nosso adaptador da entrada do GraphQL, no caso seria o nosso método do controller, quando fizermos uma requisição
	// Mutation irá cair aqui e acessar o nosso DB, é o nosso ponto de entrada
	// Para acessarmos o método de create da "Model" de category devemos injetar a nossa dependencia no método abaixo mutationResolver
	// Chamamos o método que fazer a inserção dos dados no banco de dados
	category, err := r.CategoryDB.Create(*input.Name, *input.Description)
	if err != nil {
		return nil, err
	}
	// Não dando erro, retornamos a nossa categoria e passamos para o formato de saida do graphql
	// Pegamos os dados que retornamos do banco e preenchemos a nossa model.Category, que foi gerada automaticamente em model/models_gen.go
	return &model.Category{
		ID:          category.ID,
		Name:        category.Name,
		Description: &category.Description,
	}, nil
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input *model.NewCourse) (*model.Course, error) {
	course, err := r.CourseDB.Create(input.Name, input.CategoryID, *input.Description)
	if err != nil {
		return nil, err
	}
	// Não dando erro, retornamos a nossa categoria e passamos para o formato de saida do graphql
	// Pegamos os dados que retornamos do banco e preenchemos a nossa model.Category, que foi gerada automaticamente em model/models_gen.go
	return &model.Course{
		ID:          course.ID,
		Name:        course.Name,
		Description: &course.Description,
		// Categories:  &model.Category{ID: course.CategoryID},
	}, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.CategoryDB.GetAll()
	if err != nil {
		return nil, err
	}
	// Criamos um slice que seria um array para ser preenchido, nesse caso, cada categoria que encontrarmos no banco vamos adicionar nesse slice
	// Adicionamos no formato do model.category
	var categoriesModel []*model.Category
	// Aqui fazemos um loop, percorremos o array e para cada categoria eu adiciono no array categorymodel com append no formato de model.category
	for _, category := range categories {
		categoriesModel = append(categoriesModel, &model.Category{
			ID:          category.ID,
			Name:        category.Name,
			Description: &category.Description,
		})
	}
	return categoriesModel, nil
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	courses, err := r.CourseDB.GetAll()
	if err != nil {
		return nil, err
	}
	// Criamos um slice que seria um array para ser preenchido, nesse caso, cada curso que encontrarmos no banco vamos adicionar nesse slice
	// Adicionamos no formato do model.category
	// Cria um novo array, um novo slice do tipo model.course que vai ser hidratado no for
	var coursesModel []*model.Course
	// Aqui fazemos um loop, percorremos o array e para cada curso eu adiciono no array coursemodel com append no formato de model.course
	for _, course := range courses {
		coursesModel = append(coursesModel, &model.Course{
			ID:          course.ID,
			Name:        course.Name,
			Description: &course.Description,
			// Categories:  &model.Category{ID: course.CategoryID},
		})
	}
	return coursesModel, nil
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Course returns CourseResolver implementation.
func (r *Resolver) Course() CourseResolver { return &courseResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Os arquivos categoryResolver e courseResolver são criado automaticamente na geração quando removi o Course e Category
// Do arquivo unico de models_gen
type categoryResolver struct{ *Resolver }
type courseResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
